<div class="container">
  <div class="form-container mt-5 mb-5">
  <%= form_tag transfers_path, id: "transfer-form" do %>
      <% label_tag :to %>
    <div class="form-cellule mt-5">
      <%= text_field_tag :to, nil, placeholder: "Address", class: "form-button-input" %>
    </div>

    <div class="form-cellule mt-5">
      <% label_tag :amount %>
      <%= text_field_tag :amount, nil, placeholder: "Amont", class: "form-button-input" %>
    </div>
    <div>
      <%= submit_tag "Send", class: "grey-button" %>
    </div>
  <% end %>
  </div>

    <!-- Load Web3.js -->
    <script src="https://cdn.jsdelivr.net/npm/web3@1.3.0/dist/web3.min.js"></script>

    <script>
    window.addEventListener("load", async () => {
    // Connect to Ethereum network
    if (window.ethereum) {
      window.web3 = new Web3(ethereum);
      try {
        // Request account access
        await ethereum.enable();
      } catch (error) {
        console.error("User denied account access");
      }
    }
    // Legacy dapp browsers...
    else if (window.web3) {
      window.web3 = new Web3(web3.currentProvider);
    }
    // Non-dapp browsers...
    else {
      console.error("Non-Ethereum browser detected. You should consider trying MetaMask!");
    }

    // Get the first account from the Ethereum network
    const accounts = await web3.eth.getAccounts();
    const from = accounts[0];

    // Get the balance of the first account in Ether
    const balance = await web3.eth.getBalance(from);
    const balanceInEther = web3.utils.fromWei(balance, 'ether');
    console.log(`Balance of the first account: ${balanceInEther} Ether`);

    // Handle form submission
    const form = document.getElementById("transfer-form");

    const balanceContainer = document.getElementById("balance");
    balanceContainer.innerHTML = `Balance of the first account: ${balanceInEther} Ether`;

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      // Get form values
      const to = form.elements.to.value;
      const amount = form.elements.amount.value;

      // Convert the amount to wei (the smallest unit of ether)
      const amountInWei = web3.utils.toWei(amount, "ether");

      // Send the transaction
      try {
        const result = await web3.eth.sendTransaction({ from, to, value: amountInWei });
        console.log(result);

        transactionsTable.appendChild(row);
      } catch (error) {
        console.error(error);
      }
    });
  });
</script>

<!-- app/views/transactions/index.html.erb -->
<div class="container">
  <h1>Transactions</h1>
  <div id="balance"></div>
  <table>
    <thead>
      <tr>
        <th>Transaction Hash</th>
        <th>From</th>
        <th>To</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody id="transactions">
    </tbody>
  </table>
</div>

<script>
  // Check if web3 is available
  if (typeof web3 !== 'undefined') {
    web3 = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!');
    web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
  }

  // Get the latest block number
  web3.eth.getBlockNumber((err, latestBlock) => {
    if (err) return console.error(err);

    // Get the 10 previous blocks
    let startBlock = latestBlock - 10;
    if (startBlock < 0) startBlock = 0;

    // Get the transactions for the latest block
    web3.eth.getBlock(latestBlock, true, (err, block) => {
      if (err) return console.error(err);

      let transactions = block.transactions;
      let table = document.getElementById("transactions");

      // Loop through the transactions and display them in the table
      for (let i = 0; i < transactions.length; i++) {
        let transaction = transactions[i];

        // Only display transactions from the last 10 blocks
        if (transaction.blockNumber < startBlock) continue;

        let row = table.insertRow(-1);

        let hashCell = row.insertCell(0);
        let fromCell = row.insertCell(1);
        let toCell = row.insertCell(2);
        let valueCell = row.insertCell(3);

        hashCell.innerHTML = transaction.hash;
        fromCell.innerHTML = transaction.from;
        toCell.innerHTML = transaction.to;
        valueCell.innerHTML = web3.fromWei(transaction.value, 'ether');
      }
    });
  });

</script>
